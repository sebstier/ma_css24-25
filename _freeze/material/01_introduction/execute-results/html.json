{
  "hash": "6ecceed0b81f5f6c2227fea76bda3463",
  "result": {
    "markdown": "---\ntitle: \"Setup\"\nauthor: David Schoch\nlesson: 1\ninstitute: GESIS\ndate: \"2023-06-19\"\ndate-format: \"YYYY-MM-DD\"\nfooter: \"[Automated Reports & Co with Quarto and Markdown](https://gesiscss.github.io/quarto-workshop/)\"\nformat:\n  html:\n    toc: false\nengine: knitr\n---\n\n\n# Exercise 0\n\nInstall [RStudio Desktop](https://posit.co/downloads/)\n\n# Exercise 1\n\nInstall [Quarto](https://quarto.org/docs/get-started/)\n\n\n# Exercise 2 \n\n1. Install Git\n2. Get a GitHub account (*can be done at the end of the session*)\n3. Make them communicate (*can be done at the end of the session*)\n\nUse the [provided material](extra/git.qmd) as guidance.\n\n# Explore the shell\n\nOpen your shell[^1]\n\n[^1]: The terminology can become a bit confusing in this area. An extremely elaborate try to disentangle all terms can be found in this [askubuntu](https://askubuntu.com/questions/506510/what-is-the-difference-between-terminal-console-shell-and-command-line) thread.\n\n::: {.panel-tabset}\n## macOS\n\nThe shell is often called the “terminal” on macOS, by which people mean Terminal.app. One way to launch is via Spotlight Search. Type Command + space and start typing “terminal”\n\n## Windows\nThere are no fewer than 4 possible shells you can end up in. Unless you know better, you almost certainly want to be in a Git Bash shell, which you conveniently installed during the setup of Git. To open it, Open the Start menu and type \"Git Bash\" into the search bar. The icon for Git Bash and the words “Git Bash Desktop App” will appear. Click on the icon or the words “Git Bash Desktop App” to open Git Bash. \n\n## Linux\n\nMight depend on the flavor, but I assume as a Linux user, you know how to at least open the shell.\n\n:::\n\nSome basic commands to try out:\n\n- `pwd` (print working directory). Shows directory or “folder” you are currently operating in.\n\n- `ls` (list files). Shows the files in the current working directory. This is equivalent to looking at the files in your Finder/Explorer/File Manager. \n\n- `cd` (change directory). Allows you to navigate through your directories by changing the working directory of your shell. Examples:\n\n```bash \n# show content\n$ ls\na  b\n# navigate to folder a\n$ cd a\n# navigate back to parent\n$ cd ..\n# go to home directory\n$ cd ~\n```\n(*$ indicates an input line, # a comment and everything else shows an output*)\n\n- `echo` display a line of text. This is convenient if you need to write something quickly to a new file\n\n```bash\n$ ls\na b\n$ echo \"Hello Command Line\" >> hello_cli.txt\n$ ls\na b hello_cli.txt\n```\n\n# Explore Quarto cli\n\nQuarto by itself is a tool used in the shell. To get help, use `quarto --help`\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nquarto --help \n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  Usage:   quarto \n  Version: 1.3.361\n\n  Description:\n\n    Quarto CLI\n\n  Options:\n\n    -h, --help     - Show this help.                            \n    -V, --version  - Show the version number for this program.  \n\n  Commands:\n\n    render          [input] [args...]     - Render files or projects to various document types.        \n    preview         [file] [args...]      - Render and preview a document or website project.          \n    serve           [input]               - Serve a Shiny interactive document.                        \n    create          [type] [commands...]  - Create a Quarto project or extension                       \n    create-project  [dir]                 - Create a project for rendering multiple documents          \n    convert         <input>               - Convert documents to alternate representations.            \n    pandoc          [args...]             - Run the version of Pandoc embedded within Quarto.          \n    run             [script] [args...]    - Run a TypeScript, R, Python, or Lua script.                \n    add             <extension>           - Add an extension to this folder or project                 \n    install         [target...]           - Installs an extension or global dependency.                \n    publish         [provider] [path]     - Publish a document or project. Available providers include:\n    check           [target]              - Verify correct functioning of Quarto installation.         \n    help            [command]             - Show this help or the help of a sub-command.               \n```\n:::\n:::\n\n\nFor each command, you can get additional help like so\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nquarto render --help\n```\n\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  Usage:   quarto render [input] [args...]\n  Version: 1.3.361                        \n\n  Description:\n\n    Render files or projects to various document types.\n\n  Options:\n\n    -h, --help                          - Show this help.                                                   \n    -t, --to                            - Specify output format(s).                                         \n    -o, --output                        - Write output to FILE (use '--output -' for stdout).               \n    --output-dir                        - Write project output to DIR (path is project relative)            \n    -M, --metadata                      - Metadata value (KEY:VALUE).                                       \n    --site-url                          - Override site-url for website or book output                      \n    --execute                           - Execute code (--no-execute to skip execution).                    \n    -P, --execute-param                 - Execution parameter (KEY:VALUE).                                  \n    --execute-params                    - YAML file with execution parameters.                              \n    --execute-dir                       - Working directory for code execution.                             \n    --execute-daemon                    - Keep Jupyter kernel alive (defaults to 300 seconds).              \n    --execute-daemon-restart            - Restart keepalive Jupyter kernel before render.                   \n    --execute-debug                     - Show debug output for Jupyter kernel.                             \n    --use-freezer                       - Force use of frozen computations for an incremental file render.  \n    --cache                             - Cache execution output (--no-cache to prevent cache).             \n    --cache-refresh                     - Force refresh of execution cache.                                 \n    --no-clean                          - Do not clean project output-dir prior to render                   \n    --debug                             - Leave intermediate files in place after render.                   \n    pandoc-args...                      - Additional pandoc command line arguments.                         \n    --log                     <level>   - Path to log file                                                  \n    --log-level               <level>   - Log level (info, warning, error, critical)                        \n    --log-format              <format>  - Log format (plain, json-stream)                                   \n    --quiet                             - Suppress console output.                                          \n    --profile                           - Active project profile(s)                                         \n\n  Commands:\n\n    help  [command]  - Show this help or the help of a sub-command.\n\n  Examples:\n\n    Render Markdown:    quarto render document.qmd                  \n                        quarto render document.qmd --to html        \n                        quarto render document.qmd --to pdf --toc   \n    Render Notebook:    quarto render notebook.ipynb                \n                        quarto render notebook.ipynb --to docx      \n                        quarto render notebook.ipynb --to pdf --toc \n    Render Project:     quarto render                               \n                        quarto render projdir                       \n    Render w/ Metadata: quarto render document.qmd -M echo:false    \n                        quarto render document.qmd -M code-fold:true\n    Render to Stdout:   quarto render document.qmd --output -       \n```\n:::\n:::\n\n\nYou can achieve the same in both cases by writing `help` instead of `--help`. We recommend you stick with the latter, since it is a standard way of obtaining help for a cli tool.\n\n## Exercise 3\n\nFind the right command to check if your Quarto installation is ok and run it to detect potential problems\n\n# Install TeX support\n\nIt might be, that you do not have a TeX distribution installed, which is needed to create PDF documents.\nTo check, run the following command.\n\n```bash\nquarto list tools\n```\n\nThe output could look something like this:\n\n```md\n[✓] Inspecting tools\n\nTool         Status            Installed     Latest  \nchromium     Not installed     ---           869685  \ntinytex      Not installed     ---           v2023.06\n```\n\nThe output suggests, that [TinyTeX](https://yihui.org/tinytex/) is not installed, which is the recommended engine for Quarto.\nHowever, this does not necessarily mean, that you do not already have a TeX eninge on your computer. If you regularly work in LaTeX, \nyou should be fine. If not, or if you want to use TinyTex instead, run the following\n\n```bash\nquarto install tool tinytex\n```\n\nIf you eventually find that you do not have the latest version of TinyTeX installed, you can update it like so\n\n```bash\nquarto update tinytex\n```",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}