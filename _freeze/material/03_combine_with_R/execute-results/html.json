{
  "hash": "f70b391a7146b3bc08a151509c402df4",
  "result": {
    "markdown": "---\ntitle: \"Computation\"\nauthor: \"Chung-hong Chan\"\nlesson: 3\ninstitute: GESIS\ndate: \"2023-06-19\"\ndate-format: \"YYYY-MM-DD\"\nfooter: \"[Automated Reports & Co with Quarto and Markdown](https://gesiscss.github.io/quarto-workshop/)\"\nformat:\n  html:\n    toc: false\n---\n\n\n# Markdown table\n\n```md\n| City     | Country |\n|----------|---------|\n| Mannheim | Germany |\n| Paris    | France  |\n| Tokyo    | Japan   |\n```\n\n| City     | Country |\n|----------|---------|\n| Mannheim | Germany |\n| Paris    | France  |\n| Tokyo    | Japan   |\n\n### Exercise\n\nCreate a Tic Tac Toe field and play a game with yourself\n\n| X | X | O |\n|---|---|---|\n| O | O | X |\n| X | O | O |\n\n# Code chunks\n\nLiterate programming: mixing a **document formatting language** and a **programming language**.\n\nCode chunks are snippets of programming language to do the \"mixing\". You can insert a code chunk in a Quarto document with (at least) three backticks.\n\n````md\n\n```r\nx <- \"Hello World!\"\nmessage(x)\n```\n\n```python\nx = \"Hello World!\"\nprint(x)\n```\n\n```c\nint main() {\n\tprintf(\"Hello World!\");\n\treturn 0;\n}\n```\n\n````\n\n## Exercise 1\n\nCopy and paste the R code chunk into a Quarto document and render it. Tell us what's the output.\n\n## Exercise 2 (Optional)\n\nThis workshop is really not about R, but we still need to use R. If you don't know (enough) R, try to familiarize yourself with the following. If you know all of them, congratulations you know enough R to survive this session!\n\n```r\n1 + 2 - 3 * 4 / 3\n\nx <- \"hello world\"\n\nx\n\n## message\n\nmessage(x)\n\n## mtcars is a built-in dataset. The data structure is called data frame\nmtcars\n\n## simple functions\nnrow(mtcars)\n\nhead(mtcars)\n\n## basic viz\n\nplot(mtcars$mpg, mtcars$hp)\n\nhist(mtcars$mpg)\n\n## installing external packages\n\ninstall.packages(\"knitr\")\n\n## You can either call the package by `library`\n\nlibrary(knitr)\nkable\n\n## or the namespace operator ::\n\nknitr::kable\n\n## read some data, if your csv file is called hello.csv\n\nx <- read.csv(\"hello.csv\")\n\n## get help\n\n?read.csv\n\n```\n\n# Computation Option 1: Executable Code chunk\n\nThe way to insert a code chink in the previous exercise does not involve code execution. Therefore, Quarto will only format the code, e.g. add syntax highlight.\n\nTo make the code executable, wrap `r` with a pair of curly.\n\n````\n\n```{{r}}\nx <- \"Hello World!\"\nmessage(x)\n```\n\n````\n\n## Exercise 1\n\nCopy and paste the R code chunk into a Quarto document and render it. Tell us what's the output.\n\n````\n\n```{{r}}\nx <- \"Hello World!\"\nmessage(x)\n```\n\n````\n\n## Exercise 2\n\nCreate a code chunk in a Quarto document to calculate the area of a circle with radius = 10 (hints: `pi`). Render it.\n\n# Computation Option 2: Inline R code (knitr)\n\nAnother way to invoke code execution is to use inline code: `` `r ` ``\n\n``` markdown\n## Mathematics\n\nI don't know the answer of 1 + 1 equals to 2.\n\n```\n\n## When to use inline?\n\nFor quick and dirty generation of one number in a paragraph, e.g. number of observations, calculation of mean. Otherwise, use code chunk.\n\n## Exercise 1:\n\nConvert the above area calculation to inline R code.\n\n## Exercise 2:\n\nWrite inline R code to display the following sentence (hints: `nrow`):\n\nThere are 32 observations in the data frame `mtcars`.\n\n# Full circle\n\nSome R functions generate Markdown code.\n\n```r\nmtcars\nknitr::kable(mtcars)\n```\n\n## Exercise\n\nDisplay the content of `mtcars` as a table in a Quarto document like the following:\n\n\n::: {.cell}\n::: {.cell-output-display}\n|                    |  mpg| cyl|  disp|  hp| drat|    wt|  qsec| vs| am| gear| carb|\n|:-------------------|----:|---:|-----:|---:|----:|-----:|-----:|--:|--:|----:|----:|\n|Mazda RX4           | 21.0|   6| 160.0| 110| 3.90| 2.620| 16.46|  0|  1|    4|    4|\n|Mazda RX4 Wag       | 21.0|   6| 160.0| 110| 3.90| 2.875| 17.02|  0|  1|    4|    4|\n|Datsun 710          | 22.8|   4| 108.0|  93| 3.85| 2.320| 18.61|  1|  1|    4|    1|\n|Hornet 4 Drive      | 21.4|   6| 258.0| 110| 3.08| 3.215| 19.44|  1|  0|    3|    1|\n|Hornet Sportabout   | 18.7|   8| 360.0| 175| 3.15| 3.440| 17.02|  0|  0|    3|    2|\n|Valiant             | 18.1|   6| 225.0| 105| 2.76| 3.460| 20.22|  1|  0|    3|    1|\n|Duster 360          | 14.3|   8| 360.0| 245| 3.21| 3.570| 15.84|  0|  0|    3|    4|\n|Merc 240D           | 24.4|   4| 146.7|  62| 3.69| 3.190| 20.00|  1|  0|    4|    2|\n|Merc 230            | 22.8|   4| 140.8|  95| 3.92| 3.150| 22.90|  1|  0|    4|    2|\n|Merc 280            | 19.2|   6| 167.6| 123| 3.92| 3.440| 18.30|  1|  0|    4|    4|\n|Merc 280C           | 17.8|   6| 167.6| 123| 3.92| 3.440| 18.90|  1|  0|    4|    4|\n|Merc 450SE          | 16.4|   8| 275.8| 180| 3.07| 4.070| 17.40|  0|  0|    3|    3|\n|Merc 450SL          | 17.3|   8| 275.8| 180| 3.07| 3.730| 17.60|  0|  0|    3|    3|\n|Merc 450SLC         | 15.2|   8| 275.8| 180| 3.07| 3.780| 18.00|  0|  0|    3|    3|\n|Cadillac Fleetwood  | 10.4|   8| 472.0| 205| 2.93| 5.250| 17.98|  0|  0|    3|    4|\n|Lincoln Continental | 10.4|   8| 460.0| 215| 3.00| 5.424| 17.82|  0|  0|    3|    4|\n|Chrysler Imperial   | 14.7|   8| 440.0| 230| 3.23| 5.345| 17.42|  0|  0|    3|    4|\n|Fiat 128            | 32.4|   4|  78.7|  66| 4.08| 2.200| 19.47|  1|  1|    4|    1|\n|Honda Civic         | 30.4|   4|  75.7|  52| 4.93| 1.615| 18.52|  1|  1|    4|    2|\n|Toyota Corolla      | 33.9|   4|  71.1|  65| 4.22| 1.835| 19.90|  1|  1|    4|    1|\n|Toyota Corona       | 21.5|   4| 120.1|  97| 3.70| 2.465| 20.01|  1|  0|    3|    1|\n|Dodge Challenger    | 15.5|   8| 318.0| 150| 2.76| 3.520| 16.87|  0|  0|    3|    2|\n|AMC Javelin         | 15.2|   8| 304.0| 150| 3.15| 3.435| 17.30|  0|  0|    3|    2|\n|Camaro Z28          | 13.3|   8| 350.0| 245| 3.73| 3.840| 15.41|  0|  0|    3|    4|\n|Pontiac Firebird    | 19.2|   8| 400.0| 175| 3.08| 3.845| 17.05|  0|  0|    3|    2|\n|Fiat X1-9           | 27.3|   4|  79.0|  66| 4.08| 1.935| 18.90|  1|  1|    4|    1|\n|Porsche 914-2       | 26.0|   4| 120.3|  91| 4.43| 2.140| 16.70|  0|  1|    5|    2|\n|Lotus Europa        | 30.4|   4|  95.1| 113| 3.77| 1.513| 16.90|  1|  1|    5|    2|\n|Ford Pantera L      | 15.8|   8| 351.0| 264| 4.22| 3.170| 14.50|  0|  1|    5|    4|\n|Ferrari Dino        | 19.7|   6| 145.0| 175| 3.62| 2.770| 15.50|  0|  1|    5|    6|\n|Maserati Bora       | 15.0|   8| 301.0| 335| 3.54| 3.570| 14.60|  0|  1|    5|    8|\n|Volvo 142E          | 21.4|   4| 121.0| 109| 4.11| 2.780| 18.60|  1|  1|    4|    2|\n:::\n:::\n\n\n# Figures\n\n````markdown\n```{{r}}\nhist(mtcars$mpg)\n```\n````\n\n## Exercise\n\nDisplay a scatter plot in a Quarto document like the following:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](03_combine_with_R_files/figure-html/scatter_mtcars-1.png){width=672}\n:::\n:::\n\n\n# Execution Options\n\nYou can control how the code is executed with execution options\n\n## Output options (knitr)\n\n````md\n\n```{{r}}\n#| echo: false\nknitr::kable(mtcars)\n```\n\n````\n\nThere are \n\n* `eval` (evaluate the code chunk or not)\n* `echo` (include the source code or not in the output)\n* `output` (include the execution result in the output or not: `true`, `false`, `asis`)\n* `warning` (include warnings in the output)\n* `error` (include errors in the output)\n* `include` (`include: false` suppresses all output, useful for reading data or loading packages)\n\n### Exercise\n\nRead [this file](https://raw.githubusercontent.com/chainsawriot/rang/v0.3/inst/turing/data_raw/penguins_raw.csv) and make Quarto display the following:\n\n\n\n\n\nThere are 344 observations in the file `penguins_raw.csv` and the first few rows look like so:\n\n\n::: {.cell}\n::: {.cell-output-display}\n|studyName | Sample.Number|Species                             |Region |Island    |Stage              |Individual.ID |Clutch.Completion |Date.Egg   | Culmen.Length..mm.| Culmen.Depth..mm.| Flipper.Length..mm.| Body.Mass..g.|Sex    | Delta.15.N..o.oo.| Delta.13.C..o.oo.|Comments                       |\n|:---------|-------------:|:-----------------------------------|:------|:---------|:------------------|:-------------|:-----------------|:----------|------------------:|-----------------:|-------------------:|-------------:|:------|-----------------:|-----------------:|:------------------------------|\n|PAL0708   |             1|Adelie Penguin (Pygoscelis adeliae) |Anvers |Torgersen |Adult, 1 Egg Stage |N1A1          |Yes               |2007-11-11 |               39.1|              18.7|                 181|          3750|MALE   |                NA|                NA|Not enough blood for isotopes. |\n|PAL0708   |             2|Adelie Penguin (Pygoscelis adeliae) |Anvers |Torgersen |Adult, 1 Egg Stage |N1A2          |Yes               |2007-11-11 |               39.5|              17.4|                 186|          3800|FEMALE |           8.94956|         -24.69454|NA                             |\n|PAL0708   |             3|Adelie Penguin (Pygoscelis adeliae) |Anvers |Torgersen |Adult, 1 Egg Stage |N2A1          |Yes               |2007-11-16 |               40.3|              18.0|                 195|          3250|FEMALE |           8.36821|         -25.33302|NA                             |\n|PAL0708   |             4|Adelie Penguin (Pygoscelis adeliae) |Anvers |Torgersen |Adult, 1 Egg Stage |N2A2          |Yes               |2007-11-16 |                 NA|                NA|                  NA|            NA|NA     |                NA|                NA|Adult not sampled.             |\n|PAL0708   |             5|Adelie Penguin (Pygoscelis adeliae) |Anvers |Torgersen |Adult, 1 Egg Stage |N3A1          |Yes               |2007-11-16 |               36.7|              19.3|                 193|          3450|FEMALE |           8.76651|         -25.32426|NA                             |\n|PAL0708   |             6|Adelie Penguin (Pygoscelis adeliae) |Anvers |Torgersen |Adult, 1 Egg Stage |N3A2          |Yes               |2007-11-16 |               39.3|              20.6|                 190|          3650|MALE   |           8.66496|         -25.29805|NA                             |\n:::\n:::\n\n\n## Figure Options (knitr)\n\n[ref](https://quarto.org/docs/reference/formats/html.html#figures)\n\nThere are:\n\n* `fig-width`\n* `fig-height`\n* `fig-cap`\n* `fig-alt`\n* `fig-align`\n* `fig-dpi`\n\nAn example to play around\n\n````md\n\n```{{r}}\n#| fig-cap: \"A random histogram\"\n#| fig-height: 10\n#| fig-align: right\n#| echo: false\nhist(mtcars$mpg)\n```\n\n````\n\n\n::: {.cell layout-align=\"right\"}\n::: {.cell-output-display}\n![A random histogram](03_combine_with_R_files/figure-html/hist_mtcars-1.png){fig-align='right' width=672}\n:::\n:::\n\n\n## Best practices\n\n### Label your chunk\n\nIt does nothing apparently. You will know why it is important tomorrow. All labels must be unique.\n\n````md\n```{{r}}\n#| label: mtcars_listing\n#| echo: false\nknitr::kable(mtcars)\n```\n````\n\n### (Not) cache\n\nYou can cache the computational result of a chunk (save the result as a file. When the Quarto file is being rendered again, the cached result is used instead of doing the computation again). It's best to use it with a labeled code chunk. In general, it is not recommended for a reproducible scientific workflow. Use it unless you know what you are doing.\n\n````md\n```{{r}}\n#| label: mtcars_listing\n#| echo: false\n#| cache: true\nknitr::kable(mtcars)\n```\n````\n\n## Engines\n\nR code inside a Quarto document is handled by the computational engine `knitr`. You might want to use another computational engine if R is not your thing. For example, Python code is handled by Jupyter. In a mix language environment, you might need `reticulate`.\n\n````md\n\n```{{python}}\n## This is all the Python I know\n\ndef fib(n):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\nlist(fib(5))\n```\n````\n\n\n::: {.cell}\n\n```{.python .cell-code}\n## This is all the Python I know\n\ndef fib(n):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\nlist(fib(5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[0, 1, 1, 2, 3]\n```\n:::\n:::\n\n\n## Debrief\n\n**Q:** How to display table caption?\n\n**A:** \n\nWith computation\n\n````markdown\n\n```{{r}}\n#| echo: false\n#| tbl-cap: \"Just a few rows\"\n#| tbl-cap-location: bottom\n#| label: headmtcars\nknitr::kable(head(mtcars))\n```\n\n````\n\n\n::: {.cell .tbl-cap-location-bottom tbl-cap='Just a few rows'}\n::: {.cell-output-display}\n|                  |  mpg| cyl| disp|  hp| drat|    wt|  qsec| vs| am| gear| carb|\n|:-----------------|----:|---:|----:|---:|----:|-----:|-----:|--:|--:|----:|----:|\n|Mazda RX4         | 21.0|   6|  160| 110| 3.90| 2.620| 16.46|  0|  1|    4|    4|\n|Mazda RX4 Wag     | 21.0|   6|  160| 110| 3.90| 2.875| 17.02|  0|  1|    4|    4|\n|Datsun 710        | 22.8|   4|  108|  93| 3.85| 2.320| 18.61|  1|  1|    4|    1|\n|Hornet 4 Drive    | 21.4|   6|  258| 110| 3.08| 3.215| 19.44|  1|  0|    3|    1|\n|Hornet Sportabout | 18.7|   8|  360| 175| 3.15| 3.440| 17.02|  0|  0|    3|    2|\n|Valiant           | 18.1|   6|  225| 105| 2.76| 3.460| 20.22|  1|  0|    3|    1|\n:::\n:::\n\n\nWithout computation\n\n```markdown\n| City     | Country |\n|----------|---------|\n| Mannheim | Germany |\n| Paris    | France  |\n| Tokyo    | Japan   |\n\n: List of cities\n\n\n```\n\n| City     | Country |\n|----------|---------|\n| Mannheim | Germany |\n| Paris    | France  |\n| Tokyo    | Japan   |\n\n: List of cities\n\n**Q:** I've heard that the `knitr::kable` call is not necessary.\n\n**A:** You are right. Quarto (or the rendering engine: `knitr`) can convert all `data.frame` objects to Markdown tables using the `df-print` [document option](https://quarto.org/docs/computations/r.html#data-frames). You will learn about document options a.k.a. YAML Front Matter in the next session.\n\n**Q:** Does interactive viz work?\n\n**A:** Oui.\n\n````markdown\n```{{r}}\n#| echo: false\n#| fig-height: 2\n#| fig-width: 5\n#| label: ggplotly_demo\nlibrary(ggplot2)\nlibrary(plotly)\nfig <- ggplot(mtcars, aes(wt, mpg)) + geom_point()\nggplotly(fig, height = 600, width = 1000)\n```\n````\n\n**Q:** Any fancy stuff I can do with the code listing?\n\n**A:** Many\n\nShowing the filename\n\n````markdown\n```{{r}}\n#| eval: false\n#| filename: \"whatever.R\"\nlibrary(ggplot2)\nlibrary(plotly)\nfig <- ggplot(mtcars, aes(wt, mpg)) + geom_point()\nggplotly(fig, height = 600, width = 1000)\n```\n````\n\n\n::: {.cell filename='whatever.R'}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(plotly)\nfig <- ggplot(mtcars, aes(wt, mpg)) + geom_point()\nggplotly(fig, height = 600, width = 1000)\n```\n:::\n\n\nCode folding\n\n````markdown\n```{{r}}\n#| eval: false\n#| code-fold: true\n#| code-summary: \"Demo ggplotly\"\nlibrary(ggplot2)\nlibrary(plotly)\nfig <- ggplot(mtcars, aes(wt, mpg)) + geom_point()\nggplotly(fig, height = 600, width = 1000)\n```\n````\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Demo ggplotly\"}\nlibrary(ggplot2)\nlibrary(plotly)\nfig <- ggplot(mtcars, aes(wt, mpg)) + geom_point()\nggplotly(fig, height = 600, width = 1000)\n```\n:::\n\n\nLine-numbering\n\n````markdown\n```{{r}}\n#| eval: false\n#| code-line-numbers: true\nlibrary(ggplot2)\nlibrary(plotly)\nfig <- ggplot(mtcars, aes(wt, mpg)) + geom_point()\nggplotly(fig, height = 600, width = 1000)\n```\n````\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"true\"}\nlibrary(ggplot2)\nlibrary(plotly)\nfig <- ggplot(mtcars, aes(wt, mpg)) + geom_point()\nggplotly(fig, height = 600, width = 1000)\n```\n:::\n\n\nAnd [many more](https://quarto.org/docs/output-formats/html-code.html).\n",
    "supporting": [
      "03_combine_with_R_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}